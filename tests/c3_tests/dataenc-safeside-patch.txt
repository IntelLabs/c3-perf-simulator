diff -Naur '--exclude=c3-simulator' safeside/demos/CMakeLists.txt c3-safeside/demos/CMakeLists.txt
--- safeside/demos/CMakeLists.txt	2023-09-05 06:21:25.540031606 -0700
+++ c3-safeside/demos/CMakeLists.txt	2023-09-01 18:59:05.926396216 -0700
@@ -130,8 +130,11 @@
   target_link_libraries(${demo_name} safeside)
 endfunction()

+set(C3SIM ${CMAKE_CURRENT_SOURCE_DIR}/../c3-simulator)
+include_directories(${C3SIM})
+
 # Spectre V1 PHT SA -- mistraining PHT in the same address space
-add_demo(spectre_v1_pht_sa)
+add_demo(spectre_v1_pht_sa ADDITIONAL_SOURCES ${C3SIM}/crypto/ascon_cipher.cpp ${C3SIM}/crypto/ascon_cipher.h ${C3SIM}/crypto/bipbip.h ${C3SIM}/crypto/bipbip.cpp ${C3SIM}/malloc/cc_globals.h ${C3SIM}/crypto/cc_encoding.h)

 # Spectre V1 BTB SA -- mistraining BTB in the same address space
 add_demo(spectre_v1_btb_sa)
diff -Naur '--exclude=c3-simulator' safeside/demos/local_content.h c3-safeside/demos/local_content.h
--- safeside/demos/local_content.h	2023-09-05 06:21:25.648026584 -0700
+++ c3-safeside/demos/local_content.h	2023-09-01 20:30:10.599013476 -0700
@@ -15,7 +15,7 @@
 // intended to be leaked outside of the C++ execution model using sidechannels.
 // Concrete sidechannel is dependent on the concrete vulnerability that we are
 // demonstrating.
-const char *public_data = "Hello, world!";
-const char *private_data = "It's a s3kr3t!!!";
+char * const public_data = "    Hello, world!";
+char * const private_data = "It's a s3kr3t!!!";

 #endif  // DEMOS_LOCAL_CONTENT_H_
diff -Naur '--exclude=c3-simulator' safeside/demos/spectre_v1_pht_sa.cc c3-safeside/demos/spectre_v1_pht_sa.cc
--- safeside/demos/spectre_v1_pht_sa.cc	2023-09-05 06:21:25.720023235 -0700
+++ c3-safeside/demos/spectre_v1_pht_sa.cc	2023-09-01 21:10:51.659232511 -0700
@@ -25,6 +25,19 @@
 #include "timing_array.h"
 #include "utils.h"

+#include "crypto/bipbip.h"
+#include "crypto/ascon_cipher.h"
+#include "malloc/cc_globals.h"
+#include "crypto/cc_encoding.h"
+
+#define DEF_ADDR_KEY_BYTES                                                     \
+    {                                                                          \
+        0xd1, 0xbe, 0x2c, 0xdb, 0xb5, 0x82, 0x4d, 0x03, 0x17, 0x5c, 0x25,      \
+                0x2a, 0x20, 0xb6, 0xf2, 0x93, 0xfd, 0x01, 0x96, 0xe7, 0xb5,    \
+                0xe6, 0x88, 0x1c, 0xb3, 0x69, 0x22, 0x60, 0x38, 0x09, 0xf6,    \
+                0x68                                                           \
+    }
+
 // Leaks the byte that is physically located at &text[0] + offset, without ever
 // loading it. In the abstract machine, and in the code executed by the CPU,
 // this function does not load any memory except for what is in the bounds
@@ -91,14 +104,62 @@
 }

 int main() {
+
+  // Goal: If private data is a subset of public data's allocation,
+  // show that data crypto garbles the private data if the wrong
+  // pointer is used.
+
+  ptr_metadata_t public_metadata = { 0 };
+  public_metadata.size_ = 0b000111;  // 64 B allocation
+
+  ptr_metadata_t private_metadata = { 0 };
+  private_metadata.size_ = 0b000101;  // 16 B
+
+  CCPointerEncoding enc = CCPointerEncoding();
+  CCDataEncryption dataenc = CCDataEncryption();
+
+  pointer_key_t addr_key_{.size_ = 32,
+                            .bytes_ = DEF_ADDR_KEY_BYTES};
+
+  enc.init_pointer_key(addr_key_.bytes_, addr_key_.size_);
+
+  // 2-pow-align the public data pointer.
+  // (inside gem5, this works; in a full implementation,
+  // we'd ensure this alignment in the compiler.)
+  const char* pub_data = public_data + 4;
+
+  const size_t private_offset = private_data - pub_data;
+
+  char* public_data_enc = (char*) enc.encode_pointer((uint64_t) pub_data, &public_metadata);
+  char* private_data_enc = (char*) enc.encode_pointer((uint64_t) private_data, &private_metadata);
+
+  char* pub_msg = "Not sneaky\0";
+  char* priv_msg = "It is a MysterY!\0";
+
+  // encrypt data
+  dataenc.encrypt_decrypt_bytes((uint64_t) public_data_enc, (uint8_t*) pub_msg, (uint8_t*) pub_data, 11);
+  dataenc.encrypt_decrypt_bytes((uint64_t) private_data_enc, (uint8_t*) priv_msg, (uint8_t*) private_data, 17);
+
+  std::cout << "Public data is at " << (void*) pub_data << ".\n";
+  std::cout << "Encrypted, that address is " << (void*) public_data_enc << ".\n";
+  std::cout << "Decrypted, that CA gives " << (void*) enc.decode_pointer((uint64_t) public_data_enc) << ".\n";
+  std::cout.flush();
+
+  std::cout << "Private data is at " << (void*) private_data << ".\n";
+
+  std::cout << "But public_data's CA + private_offset, decoded, gives " << (void*) enc.decode_pointer((uint64_t) public_data_enc + private_offset) << "!\n";
+
+  std::cout << "Public data, via its CA: " << public_data_enc << "\n";
+
   std::cout << "Leaking the string: ";
   std::cout.flush();
-  const size_t private_offset = private_data - public_data;
+
   for (size_t i = 0; i < strlen(private_data); ++i) {
     // On at least some machines, this will print the i'th byte from
     // private_data, despite the only actually-executed memory accesses being
     // to valid bytes in public_data.
-    std::cout << LeakByte(public_data, private_offset + i);
+    std::cout << LeakByte(pub_data, private_offset + i);
+    //std::cout << LeakByte(public_data_enc, private_offset + i);
     std::cout.flush();
   }
   std::cout << "\nDone!\n";
--- safeside/c3-simulator/crypto/bipbip.cpp	2023-08-31 08:13:54.000000000 -0700
+++ c3-safeside/c3-simulator/crypto/bipbip.cpp	2023-09-01 18:44:46.554871754 -0700
@@ -60,7 +60,7 @@
         0x19, 0x0f, 0x28, 0x3d, 0x24, 0x18, 0x3b, 0x0d, 0x20, 0x0e, 0x1e,
         0x22, 0x1b, 0x32, 0x1c, 0x17, 0x07, 0x16, 0x06, 0x2d};

-static inline auto get_bit(uint64_t in, int position) {
+static inline uint64_t get_bit(uint64_t in, int position) {
     return (in >> position) & 0x1;
 }

